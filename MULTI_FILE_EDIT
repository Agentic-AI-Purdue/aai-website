// components/theme-provider.tsx
'use client'
import * as React from 'react'
import { ThemeProvider as NextThemesProvider, type ThemeProviderProps } from 'next-themes'

export function ThemeProvider({
  children,
  ...props
}: ThemeProviderProps) {
  return (
    <NextThemesProvider
      attribute="class"
      enableSystem
      defaultTheme="system"
      disableTransitionOnChange
      storageKey="agentic-ai-club-theme"
      {...props}
    >
      {children}
    </NextThemesProvider>
  )
}

// app/layout.tsx
import '@/app/globals.css'
import { ThemeProvider } from '@/components/theme-provider'
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Agentic AI Club',
  description: 'Purdueâ€™s premier student organization for agentic AI development.',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className="min-h-screen bg-white text-neutral-900 antialiased transition-colors dark:bg-neutral-950 dark:text-neutral-50">
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}

// components/theme-toggle.tsx
'use client'

import { useEffect, useState } from 'react'
import { useTheme } from 'next-themes'
import { Moon, Sun } from 'lucide-react'
import { Button } from '@/components/ui/button'

export function ThemeToggle() {
  const { resolvedTheme, setTheme, theme } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
    // Optional: clean up any legacy key to avoid confusion if you previously stored to "theme"
    try {
      if (localStorage.getItem('theme') && !localStorage.getItem('agentic-ai-club-theme')) {
        localStorage.removeItem('theme')
      }
    } catch {}
  }, [])

  if (!mounted) {
    return (
      <Button
        variant="outline"
        size="icon"
        aria-label="Toggle theme"
        aria-pressed="false"
        className="group backdrop-blur bg-white/70 dark:bg-neutral-800/50"
      >
        <Moon className="h-5 w-5" />
      </Button>
    )
  }

  const isDark = resolvedTheme === 'dark'

  return (
    <Button
      variant="outline"
      size="icon"
      aria-label={isDark ? 'Switch to light mode' : 'Switch to dark mode'}
      aria-pressed={isDark}
      onClick={() => setTheme(isDark ? 'light' : 'dark')}
      title={isDark ? 'Light mode' : 'Dark mode'}
      className="group relative overflow-hidden backdrop-blur bg-white/70 transition-colors hover:border-indigo-300 dark:bg-neutral-800/50 dark:hover:border-indigo-700"
    >
      <span className="absolute inset-0 -z-10 bg-gradient-to-br from-indigo-600/10 to-purple-600/10 opacity-0 transition-opacity group-hover:opacity-100" />
      {isDark ? <Sun className="h-5 w-5 text-amber-400" /> : <Moon className="h-5 w-5 text-indigo-600" />}
    </Button>
  )
}
